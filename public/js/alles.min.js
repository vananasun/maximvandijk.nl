(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
function groet(country = 'nl') {
    const text = {
        'nl': {
            'night': 'Welkom nachtuil',
            'morning': 'Goedenmorgen',
            'afternoon': 'Goedemiddag',
            'evening': 'Goedenavond'
        },
        'en': {
            'night': 'Welcome nightowl',
            'morning': 'Good morning',
            'afternoon': 'Great afternoon',
            'evening': 'Good evening'
        }
    }

    let a = '';
    let hours = new Date().getHours();
    if (hours < 6) a = text[country]['night'];
    else if (hours < 12) a = text[country]['morning'];
    else if (hours < 18) a = text[country]['afternoon'];
    else a = text[country]['evening'];
    return a;
}

function leeftijd() {
    var birthday = +new Date('1999-05-20');
    return~~ ((Date.now() - birthday) / (31557600000));
}

function dia(country = 'nl') {
    const t = {
        'nl': {
            'day': 'dag',
            'night': 'nacht'
        },
        'en': {
            'day': 'day',
            'night': 'night'
        }
    };
    if (new Date().getHours() < 12) return t[country]['night'];
    else return t[country]['day'];
}



/*******************************************************************************
 *
 ******************************************************************************/



LocaleManager = function() {
    let _sections = document.querySelectorAll('.section');
    if (!_sections) return;
    _sections.forEach(_section => {
        switch (_section.id) {
        case 'section-about':
            let _spans = _section.querySelectorAll('span');
            _spans.forEach(_span => {
                if (_span.classList.contains('nl')) {
                    _span.innerHTML = _span.innerHTML.replace('$groet', groet());
                    _span.innerHTML = _span.innerHTML.replace('$leeftijd', leeftijd());
                    _span.innerHTML = _span.innerHTML.replace('$dia', dia());
                } else {
                    _span.innerHTML = _span.innerHTML.replace('$groet', groet('en'));
                    _span.innerHTML = _span.innerHTML.replace('$leeftijd', leeftijd());
                    _span.innerHTML = _span.innerHTML.replace('$dia', dia('en'));
                }
            });
            break;
        case 'section-projects':
            break;
        case 'section-contact':
            break;
        }
    });
    
}

LocaleManager.prototype.change = function(country) {
    const countries = [ 'nl', 'en' ];
    countries.forEach(c => document.body.classList.remove(c));
    document.body.classList.add(country);
}

module.exports = LocaleManager;

//
//
// new Locale({
//     '$groet': function() {
//
//     },
//
//     '$leeftijd': function() {
//         return 21;
//     }
//
//     '$dia': function() {
//         return 'dag';
//     }
//
// });

},{}],2:[function(require,module,exports){
let SoundBuffer = require('SoundBuffer.js');

function Muziekje(url) {
    let promise = Muziekje.RequestContext();
    this.soundBuffer = new SoundBuffer(url, promise);
}

Muziekje.loaded = false;
Muziekje.ctx = null;
Muziekje.gainNode = null;

/**
 * Wait for a user interaction and then start the audio context.
 */
Muziekje.StartOnInteraction = function() {
    document.addEventListener('click', () => Muziekje.InitIfRequired() );
    document.addEventListener('touchstart', () => Muziekje.InitIfRequired() );
    document.addEventListener('keypress', () => Muziekje.InitIfRequired() );
    document.addEventListener('mousewheel', () => Muziekje.InitIfRequired() );
}

/**
 * Initialize the audio context.
 */
Muziekje.InitIfRequired = function(volume = 0.06) {
    if (Muziekje.loaded) return;

    // Create context
    let AudioContext = window.AudioContext || window.webkitAudioContext;
    this.ctx = new AudioContext();

    // Setup nodes
    Muziekje.targetVolume = volume;
    Muziekje.gainNode = Muziekje.ctx.createGain();
    Muziekje.gainNode.gain.value = 0.0;
    Muziekje.gainNode.connect(Muziekje.ctx.destination);

    Muziekje.loaded = true;
}

/**
 * @return {Promise}
 */
Muziekje.RequestContext = function() {
    return new Promise(
        function(resolve, reject) {
            (function waitForContext() {
                if (null !== Muziekje.ctx) return resolve(Muziekje.ctx);
                setTimeout(waitForContext, 30);
            })();
        }
    );
}

/**
 * Request to play sound
 */
Muziekje.prototype.play = function() {
    this.soundBuffer.requestBuffer().then(function(){

        let source = Muziekje.ctx.createBufferSource();
        source.loop = true;
        source.buffer = this.soundBuffer.buffer;
        source.connect(Muziekje.gainNode);
        source.start(Muziekje.ctx.currentTime);
        Muziekje.gainNode.gain.linearRampToValueAtTime(Muziekje.targetVolume, 8);

    }.bind(this));
}



module.exports = Muziekje;

},{"SoundBuffer.js":3}],3:[function(require,module,exports){

/**
 * @constructor
 */
function SoundBuffer(url, promise) {
    this.url = url;
    this.buffer = null;

    let self = this;
    let req = new XMLHttpRequest();
    req.open("GET", this.url, true);
    req.responseType = "arraybuffer";

    req.onload = promise.then(function(ctx) {
        self.decodeBuffer(req.response, ctx);
    });
    req.onerror = function(){ console.error('XHR error'); }
    req.send();
}

/**
 *
 */
SoundBuffer.prototype.decodeBuffer = function(response, ctx) {
    let self = this;
    if (!response) {
        console.error('Failed to request audio file "'+self.url+'"');
        return;
    }
    ctx.decodeAudioData(
        response,
        function(buffer) {
            if (!buffer) {
                console.error('Error decoding audio file "'+self.url+'"');
                return;
            }
            self.buffer = buffer;
        },
        function(error) {
            console.error('decodeAudioData error', error);
        }
    );

}

/**
 * Request a SoundBuffer's buffer of audio data.
 *
 * @return {Promise} Will be fulfilled once the SoundBuffer is loaded.
 */
SoundBuffer.prototype.requestBuffer = function() {
    let self = this;

    return new Promise(
        function(resolve, reject) {
            (function waitForSoundBufferToLoad() {
                if (null !== self.buffer) return resolve();
                // @TODO: Reject on timeout
                setTimeout(waitForSoundBufferToLoad, 30);
            })();
        }
    );
}



module.exports = SoundBuffer;

},{}],4:[function(require,module,exports){
let LocaleManager = require('LocaleManager.js');
require('pages/index.js');

g_locale = new LocaleManager();

},{"LocaleManager.js":1,"pages/index.js":5}],5:[function(require,module,exports){
/***
 *
 * Play music
 *
 */
let Muziekje = require('Muziekje.js');
new Muziekje('audio/polegnala_single_loop.ogg').play();
Muziekje.StartOnInteraction();


/***
 *
 * Navigation
 *
 **/
let navbtns = [ 'about', 'projects', 'contact', 'welcome' ];
navbtns.forEach(n => {
    let _e = document.getElementById(n);
    if (!_e) return;
    _e.addEventListener('click', event => {

        // deactivate currently displayed section
        document.querySelector('.section.active').classList.remove('active');

        // activate corresponding section
        document.getElementById('section-' + event.target.parentElement.id).classList.add('active');

    })
});

},{"Muziekje.js":2}]},{},[4]);
